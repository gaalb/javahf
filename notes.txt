Model:
    GameData: minden információ a játékról
        Player
            Profile: beállítások, hány labdája volt, honnan lőhetett
            State: hány labda van még a tárban, hány labda jött vissza, mi a szög
        CollideableObject-ek
            Blockok: Polygon reprezentáció, középpont'
            Segítségek: kör alak
        Labdák: sebesség, irány, pozíció
            Collision logika
            Movement logika

View:
    GameFrame
    GamePanel

Controller:
    Engine
    InputHandler


Collision detection:
Egy ütközés mindig egy pontban fog történni, mert körrel fog az ütközés
történni. Az ütközéskor az ütközési pont és a kör középpontja kijelölnek
egy egyenest. Az ezzel az egyenessel párhuzamos sebességkomponens megfordul.
Honnan lesz a pont?
1.: a végpontok a körbe esnek-e?
    1.a: ha igen, végpont ütközés, és a végpont a keresett pont
    1.b: ha nem, akkor vagy nincs ütközés vagy oldal ütközés
2.: megkeressük az egyenes körhöz legközelebb eső pontját
3.: ha ez a pont nem esik az egyenesre, nincs collision
4.: ha ez a pont az egyenesre esik, és távolsága a körtől kisebb,
    mint a sugár, collision van és ő lesz a collision pont


Tehát egyelőre meddig jussunk el, mi legyen a flow?
-legyenek meg a model classok
-fekete háttéren legyenek meg a helyet jelző dolgok
-legyen egy labda amivel célzunk
-lőjük ki a labdát
-pattanjon le egy blokkról
-pattanjon vissza a falakról
-egészen amíg az aljára nem ér

GOLYÓ MECHANIKA:
-Az engine setupol egy timert
-Amikor a timer tickel, a játékban lévő labdák updatelődnek
    -a sebességüknek megfelelően frissül a pozíciójuk
    -csekkolják az ütközéseket: először a fallal, aztán az objektumokkal
    -ha kimennek a játékterületről, kimennek a játékból
-A tárban lévő labdáknak az ágyú ad kezdő sebességet

Refactor irányelvek:
-A Data maga csak tárol mint eddig
-A gameEngine-ből bizonyos logikákat át kell vinni az osztályokba
    -pl a labda tud mozogni, és pattanni
-Külön a physicsEngine és gameSupervisor (Game?)
    -physicsEngine a fizikáért felel, az update-jében
    -gameSupervisor a játékot kezeli: köröket pörget, blokkokat mozgat
        -!!! listenereket állítgat
-A Frame ugyanúgy mint eddig, de benne a Panel egyszerűbben
    -a panelnek egy dolgot kell tudnia: displayGameData
        -mégpedig fázistól függően 3 féle lehet




Egy elvetett ötlet az aim helperre:
//    public Point2D.Double getAimAssistPoint() {
//        // we'll have two lines: one for the right side of the ball stream, one for the left
//        Cannon cannon = gameEngine.getGameData().getCannon();
//        double angle = cannon.getAimAngle();
//        Point2D.Double leftSide = cannon.getPosition();
//        leftSide.x -= GameSettings.BALL_RADIUS * Math.sin(Math.toRadians(angle));
//        leftSide.y += GameSettings.BALL_RADIUS * Math.cos(Math.toRadians(angle));
//        Point2D.Double rightSide = cannon.getPosition();
//        rightSide.x += GameSettings.BALL_RADIUS * Math.sin(Math.toRadians(angle));
//        rightSide.y -= GameSettings.BALL_RADIUS * Math.cos(Math.toRadians(angle));
//        List<Block> blocks = gameEngine.getGameData().getBlocks();
//        double intersectionDistance = GameSettings.GAME_DIAMETER;
//        Block intersectingBlock = null;
//        Point2D.Double intersectingPoint = null;
//        for (Block block: blocks) {
//            Line2D.Double[] edges = block.getSides();
//            for (Line2D.Double edge: edges) {
//                Point2D.Double leftIntersectingPoint = CollisionDetection.lineAndSegment(angle, leftSide, edge);
//                if (leftIntersectingPoint != null && leftIntersectingPoint.distance(leftSide) < intersectionDistance) {
//                    intersectionDistance = leftIntersectingPoint.distance(leftSide);
//                    intersectingBlock = block;
//                    double x = leftIntersectingPoint.x - leftSide.x + cannon.getPosition().x;
//                    double y = leftIntersectingPoint.y - leftSide.y + cannon.getPosition().y;
//                    intersectingPoint = new Point2D.Double(x, y);
//                }
//                Point2D.Double rightIntersectingPoint = CollisionDetection.lineAndSegment(angle, rightSide, edge);
//                if (rightIntersectingPoint != null && rightIntersectingPoint.distance(rightSide) < intersectionDistance) {
//                    intersectionDistance = rightIntersectingPoint.distance(rightSide);
//                    intersectingBlock = block;
//                    double x = rightIntersectingPoint.x - rightSide.x + cannon.getPosition().x;
//                    double y = rightIntersectingPoint.y - rightSide.y + cannon.getPosition().y;
//                    intersectingPoint = new Point2D.Double(x, y);
//                }
//            }
//        }
//        return intersectingPoint;
//    }